version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.12
    commands:
      - echo Installing dependencies...
      - pip install --no-cache-dir -r requirements.txt
  pre_build:
    commands:
      - echo Loading environemt variables...
      - export $(cat ./vars-dev.txt | xargs)
      - echo Service is $SERVICE_NAME
      - echo Account is $AWS_ACCOUNT_ID
      - echo Region is $AWS_REGION
      - echo ECR repo is $ECR_REPO
      - echo Cluster is $CLUSTER_NAME
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      - echo cloning down textcat_goemotions...
      - spacy project clone tutorials/textcat_goemotions
      - echo Downloading spacy project assets...
      - cd textcat_goemotions
      - spacy project assets
      - cd ..
      - echo Model training assets setup, moving to train and build phase...
  build:
    commands:
      - echo Training the spaCy project...
      - cd textcat_goemotions
      - echo Limit training time by changing a few hyperparameters...
      - sed -i 's/max_steps = 20000/max_steps = 1000/' "configs/cnn.cfg"
      - spacy project run all
      - cd ..
      - echo Training complete. Model is available at textcat_goemotions/training/cnn/model-best
      - echo Building the Docker image...
      - docker build -t $SERVICE_NAME-image .
      # - echo Running smoke test on the container...
      # - docker run -d -p 80:80 --name $SERVICE_NAME-container $SERVICE_NAME-image
      # - sleep 15  # Wait for the container to start
      # - echo Check container logs...
      # - docker logs $SERVICE_NAME-container
      # - docker ps
      # - |
      #   python -c "
      #   import requests
      #   try:
      #       response = requests.post('http://localhost:80/predict', json={'text': 'this is some text'})
      #       assert response.status_code == 200, 'Smoke test failed!'
      #       print('Smoke test passed:', response.json())
      #   except Exception as e:
      #       print('Smoke test failed:', str(e))
      #       exit(1)
      #   "
      # - echo Check the container logs...
      # - docker logs $SERVICE_NAME-container
      # - docker ps
      # - docker stop $SERVICE_NAME-container
      # - docker rm -f $SERVICE_NAME-container
  post_build:
    commands:
      - echo Tagging the Docker image...
      - docker tag $SERVICE_NAME-image:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$SERVICE_NAME-image
      - echo Pushing Docker image to ECR...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$SERVICE_NAME-image
      - echo Preparing task definition...
      - |
        python -c "
        import json
        with open('task_definition_template.json') as f:
            task_definition = json.load(f)
        task_definition['family'] = '$SERVICE_NAME'
        task_definition['executionRoleArn'] = 'arn:aws:iam::$AWS_ACCOUNT_ID:role/mlops-workshop-ecs-task-role'
        task_definition['taskRoleArn'] = 'arn:aws:iam::$AWS_ACCOUNT_ID:role/mlops-workshop-ecs-task-role'
        task_definition['containerDefinitions'][0]['name'] = '$ECR_REPO'
        task_definition['containerDefinitions'][0]['image'] = '$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$SERVICE_NAME-image'
        task_definition['containerDefinitions'][0]['logConfiguration']['options']['awslogs-group'] = '/ecs/$SERVICE_NAME'
        task_definition['containerDefinitions'][0]['logConfiguration']['options']['awslogs-region'] = '$AWS_REGION'
        with open('task_definition.json', 'w') as f:
            json.dump(task_definition, f, indent=2)
        "
      - echo Registering task definition...
      - aws ecs register-task-definition --cli-input-json file://task_definition.json
      - echo Checking if ECS service exists...
      - |
        SERVICE_EXISTS=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query 'services[0].status' --output text)
        if [ "$SERVICE_EXISTS" == "ACTIVE" ]; then
            echo "Service exists. Updating the service..."
            aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment
        else
            echo "Service does not yet exist. Creating ECS service..."
            echo "Setting up ALB routing for $SERVICE_NAME..."
            export ALB_ARN=$(aws elbv2 describe-load-balancers --names mlops-workshop-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text)
            export TG_ARN=$(aws elbv2 create-target-group --name $SERVICE_NAME-tg --protocol HTTP --port 80 --vpc-id $VPC_ID --target-type ip --query 'TargetGroups[0].TargetGroupArn' --output text)
            echo "Adding routing rule for /$SERVICE_NAME..."
            export LISTENER_ARN=$(aws elbv2 describe-listeners --load-balancer-arn $ALB_ARN --query 'Listeners[0].ListenerArn' --output text)
            aws elbv2 create-rule --listener-arn $LISTENER_ARN --conditions '[{"Field":"path-pattern","Values":["/'"$SERVICE_NAME"'"]}]' --priority $PRIORITY --actions '[{"Type":"forward","TargetGroupArn":"'"$TG_ARN"'"}]'
            echo "Creating ECS service..."
            aws ecs create-service \
              --cluster $CLUSTER_NAME \
              --service-name $SERVICE_NAME \
              --task-definition $SERVICE_NAME \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[subnet-061a6219b4c4f846a,subnet-0e4dcb4f98967aaec],securityGroups=[sg-09e220f656a51ebb9],assignPublicIp=ENABLED}" \
              --load-balancers "targetGroupArn=$TG_ARN,containerName=$ECR_REPO,containerPort=80"
        fi
artifacts:
  files:
    - textcat_goemotions/training/cnn/model-best/**  # Optional: Save the trained model as an artifact
